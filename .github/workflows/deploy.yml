name: Deploy to Production - v2 (Serverless)

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.VPS_KEY }}
      
      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
      
      - name: Deploy to server v2
        run: |
          # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–∞–ø–∫—É –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "rm -rf ~/ai-photo-bot && mkdir -p ~/ai-photo-bot"
          
          # –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã v2 (–ë–ï–ó proxy!)
          scp -r src docker-compose.yml Caddyfile deploy.sh requirements.txt ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/ai-photo-bot/
          
          # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ–¥ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É v2
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "cat > ~/ai-photo-bot/.env << 'EOF'
          # OpenAI Configuration
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          ASSISTANT_ID=${{ secrets.ASSISTANT_ID }}
          
          # Telegram Bot Configuration
          BOT_TOKEN=${{ secrets.BOT_TOKEN }}
          WEBHOOK_URL=https://${{ secrets.VPS_HOST }}/webhook
          WEBHOOK_SECRET=${{ secrets.WEBHOOK_SECRET }}
          
          # PiAPI Configuration
          PIAPI_KEY=${{ secrets.PIAPI_KEY }}
          PIAPI_BASE_URL=https://api.piapi.ai/v1
          
          # Yandex Cloud Configuration
          YC_ACCESS_KEY=${{ secrets.YC_ACCESS_KEY }}
          YC_SECRET_KEY=${{ secrets.YC_SECRET_KEY }}
          YC_BUCKET_NAME=ai-photos
          YC_REGION=ru-central1
          YC_ENDPOINT=https://storage.yandexcloud.net
          
          # Yandex Message Queue (replaces Redis/Celery)
          YC_MQ_URL=${{ secrets.YC_MQ_URL }}
          YC_MQ_QUEUE_NAME=jobs
          
          # Environment
          ENVIRONMENT=production
          DEBUG=false
          LOG_LEVEL=INFO
          
          # Security
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          
          # Worker Configuration
          WORKER_CONCURRENCY=4
          EOF"
          
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} '
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $USER
            fi
          '
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "cd ~/ai-photo-bot && echo 'Project structure:' && ls -la && echo 'src structure:' && ls -la src/"
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "cd ~/ai-photo-bot && chmod +x deploy.sh && ./deploy.sh"
      
      - name: Notify deployment success
        if: success()
        run: |
          echo "üéâ Deployment v2 successful! Bot is running at https://${{ secrets.VPS_HOST }}"
          
      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment v2 failed! Check logs above." 