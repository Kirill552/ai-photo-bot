"""
Message handlers for Telegram Bot
"""

import logging
from typing import Dict, Any, Optional
from aiogram import Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from .config import Config
from .utils import validate_photo, save_photo, create_session_id
from .assistant import OpenAIAssistant
from .states import PhotoSessionStates

logger = logging.getLogger(__name__)
config = Config()


async def cmd_start(message: Message, state: FSMContext, openai_assistant: OpenAIAssistant):
    """Handle /start command"""
    
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    logger.info(f"User {user_id} (@{username}) started the bot")
    
    # Clear any existing state
    await state.clear()
    
    # Create session
    session_id = create_session_id(user_id)
    await state.update_data(session_id=session_id)
    
    # Welcome message
    welcome_text = f"""
üé≠ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI –§–æ—Ç–æ—Å—Ç—É–¥–∏—é!</b>

–ü—Ä–∏–≤–µ—Ç, {username}! 

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—Ä–µ—Ç—ã —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.

<b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å 40 –∏–ª–∏ 100 —Å—Ç—É–¥–∏–π–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Ä—Ç—Ä–µ—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö (Vogue, Pastel, CEO –∏ –¥—Ä.)
‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ –∑–∞ 24 —á–∞—Å–∞
‚Ä¢ –í—ã–¥–∞–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤—ã—Å–æ–∫–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –ó–∞–≥—Ä—É–∑–∏ 10-15 —Å–µ–ª—Ñ–∏
2. –†–∞—Å—Å–∫–∞–∂–∏ –æ –∂–µ–ª–∞–µ–º–æ–º —Å—Ç–∏–ª–µ
3. –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤—ã–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏

–ì–æ—Ç–æ–≤–∞ –Ω–∞—á–∞—Ç—å? –ù–∞–∂–º–∏ "–ù–∞—á–∞—Ç—å —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—é" üëá
"""
    
    # Create inline keyboard
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(
        text="‚ú® –ù–∞—á–∞—Ç—å —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—é",
        callback_data="start_session"
    ))
    keyboard.add(InlineKeyboardButton(
        text="üìã –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç",
        callback_data="show_examples"
    ))
    keyboard.add(InlineKeyboardButton(
        text="üí∞ –¶–µ–Ω—ã",
        callback_data="show_prices"
    ))
    keyboard.adjust(1)
    
    await message.answer(welcome_text, reply_markup=keyboard.as_markup())


async def cmd_help(message: Message):
    """Handle /help command"""
    
    help_text = """
üîß <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/new - –ù–æ–≤–∞—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è
/status - –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑

<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:</b>
‚Ä¢ 10-15 —Å–µ–ª—Ñ–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤
‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
‚Ä¢ –õ–∏—Ü–æ —á–µ—Ç–∫–æ –≤–∏–¥–Ω–æ
‚Ä¢ –†–∞–∑–º–µ—Ä –¥–æ 10 –ú–ë –∫–∞–∂–¥–æ–µ

<b>–°—Ç–∏–ª–∏ —Å—ä–µ–º–∫–∏:</b>
‚Ä¢ Studio Vogue - –≥–ª—è–Ω—Ü–µ–≤—ã–µ –∂—É—Ä–Ω–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ
‚Ä¢ Pastel Dream - –Ω–µ–∂–Ω—ã–µ –ø–∞—Å—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–Ω–∞
‚Ä¢ CEO Shot - –¥–µ–ª–æ–≤—ã–µ –ø–æ—Ä—Ç—Ä–µ—Ç—ã
‚Ä¢ Film 90s - –≤–∏–Ω—Ç–∞–∂–Ω–∞—è –ø–ª–µ–Ω–∫–∞
‚Ä¢ Golden Hour - –∑–æ–ª–æ—Ç–æ–π —á–∞—Å
‚Ä¢ Black & White - –∫–ª–∞—Å—Å–∏–∫–∞ —á/–±

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏ @support_username
"""
    
    await message.answer(help_text)


async def cmd_new(message: Message, state: FSMContext):
    """Handle /new command"""
    
    # Clear existing state
    await state.clear()
    
    # Create new session
    session_id = create_session_id(message.from_user.id)
    await state.update_data(session_id=session_id)
    
    await message.answer(
        "üÜï –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—é!\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏ 10-15 —Å–µ–ª—Ñ–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤:",
        reply_markup=get_photo_upload_keyboard()
    )
    
    await state.set_state(PhotoSessionStates.waiting_for_photos)


async def cmd_status(message: Message, state: FSMContext):
    """Handle /status command"""
    
    data = await state.get_data()
    session_id = data.get("session_id")
    
    if not session_id:
        await message.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥–æ–π /new")
        return
    
    # TODO: Check session status from database
    await message.answer(
        f"üìä <b>–°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏:</b> {session_id}\n\n"
        "üîÑ –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö...\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∏ –¥–∏–∞–ª–æ–≥, —á—Ç–æ–±—ã —è –º–æ–≥–ª–∞ –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–æ—Ç–æ!"
    )


async def cmd_cancel(message: Message, state: FSMContext):
    """Handle /cancel command"""
    
    await state.clear()
    await message.answer(
        "‚ùå –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /new"
    )


async def callback_start_session(callback: CallbackQuery, state: FSMContext):
    """Handle start session callback"""
    
    await callback.answer()
    
    # Clear existing state
    await state.clear()
    
    # Create new session
    session_id = create_session_id(callback.from_user.id)
    await state.update_data(session_id=session_id)
    
    await callback.message.edit_text(
        "üì∏ <b>–ù–æ–≤–∞—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è</b>\n\n"
        "–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–Ω–µ–º —Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–≤–æ–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.\n\n"
        "<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n"
        "‚Ä¢ 10-15 —Å–µ–ª—Ñ–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤\n"
        "‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
        "‚Ä¢ –õ–∏—Ü–æ —á–µ—Ç–∫–æ –≤–∏–¥–Ω–æ\n"
        "‚Ä¢ –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –º–∞—Å–æ–∫\n\n"
        "–ó–∞–≥—Ä—É–∂–∞–π —Ñ–æ—Ç–æ –ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ä–∞–∑—É üëá",
        reply_markup=get_photo_upload_keyboard(),
        parse_mode="HTML"
    )
    
    await state.set_state(PhotoSessionStates.waiting_for_photos)


async def callback_show_examples(callback: CallbackQuery):
    """Handle show examples callback"""
    
    await callback.answer()
    
    examples_text = """
üé® <b>–ü—Ä–∏–º–µ—Ä—ã –Ω–∞—à–∏—Ö —Ä–∞–±–æ—Ç</b>

<b>Studio Vogue</b> - –¥—Ä–∞–º–∞—Ç–∏—á–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, –∫–∞–∫ –≤ –≥–ª—è–Ω—Ü–µ–≤—ã—Ö –∂—É—Ä–Ω–∞–ª–∞—Ö
<b>Pastel Dream</b> - –Ω–µ–∂–Ω—ã–µ –ø–∞—Å—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–Ω–∞, –≤–æ–∑–¥—É—à–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞
<b>CEO Shot</b> - –¥–µ–ª–æ–≤—ã–µ –ø–æ—Ä—Ç—Ä–µ—Ç—ã –¥–ª—è LinkedIn –∏ —Ä–µ–∑—é–º–µ
<b>Film 90s</b> - –≤–∏–Ω—Ç–∞–∂–Ω–∞—è –ø–ª–µ–Ω–∫–∞ —Å —Ç–µ–ø–ª—ã–º–∏ —Ç–æ–Ω–∞–º–∏
<b>Golden Hour</b> - –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–≤–µ—Ç –∑–æ–ª–æ—Ç–æ–≥–æ —á–∞—Å–∞
<b>Black & White</b> - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —á–µ—Ä–Ω–æ-–±–µ–ª–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è

–ö–∞–∂–¥—ã–π —Å—Ç–∏–ª—å –≤–∫–ª—é—á–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã, –ø–æ–∑—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!
"""
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(
        text="‚ú® –ù–∞—á–∞—Ç—å —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—é",
        callback_data="start_session"
    ))
    keyboard.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="back_to_start"
    ))
    
    await callback.message.edit_text(examples_text, reply_markup=keyboard.as_markup(), parse_mode="HTML")


async def callback_show_prices(callback: CallbackQuery):
    """Handle show prices callback"""
    
    await callback.answer()
    
    prices_text = """
üí∞ <b>–ù–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–æ 2025)</b>

üÜì <b>–ü–∞–∫–µ—Ç "–ü—Ä–æ–±–Ω—ã–π"</b> - –ë–ï–°–ü–õ–ê–¢–ù–û
‚Ä¢ 2 —Ñ–æ—Ç–æ, 1 –æ–±—Ä–∞–∑
‚Ä¢ –¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞
‚Ä¢ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å < 1 —á–∞—Å

üí´ <b>–ü–∞–∫–µ—Ç "–ë–∞–∑–æ–≤—ã–π"</b> - 1 500 ‚ÇΩ
‚Ä¢ 10 —Ñ–æ—Ç–æ, 3 –æ–±—Ä–∞–∑–∞
‚Ä¢ Web-–∫–∞—á–µ—Å—Ç–≤–æ (1920px)
‚Ä¢ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∑–∞ 6 —á–∞—Å–æ–≤

‚≠ê <b>–ü–∞–∫–µ—Ç "–°—Ç–∞–Ω–¥–∞—Ä—Ç"</b> - 3 500 ‚ÇΩ
‚Ä¢ 25 —Ñ–æ—Ç–æ, 5 –æ–±—Ä–∞–∑–æ–≤ + 1 –≤–∏–¥–µ–æ
‚Ä¢ HQ –∫–∞—á–µ—Å—Ç–≤–æ (3K)
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å
‚Ä¢ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∑–∞ 24 —á–∞—Å–∞

üëë <b>–ü–∞–∫–µ—Ç "–ü—Ä–µ–º–∏—É–º"</b> - 8 990 ‚ÇΩ
‚Ä¢ 50 —Ñ–æ—Ç–æ, 8 –æ–±—Ä–∞–∑–æ–≤, 2 –≤–∏–¥–µ–æ
‚Ä¢ 4K + —Ä—É—á–Ω–∞—è —Ä–µ—Ç—É—à—å 5 –ª—É—á—à–∏—Ö
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
‚Ä¢ –ü—Ä–∞–≤–∞ –Ω–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
‚Ä¢ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∑–∞ 48 —á–∞—Å–æ–≤

<b>üéÅ –ë–æ–Ω—É—Å—ã:</b>
‚Ä¢ -10% –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
‚Ä¢ 15% –∫—ç—à–±—ç–∫ –∑–∞ –∫–∞–∂–¥—É—é –ø–æ–¥—Ä—É–≥—É
"""
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(
        text="üÜì –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ",
        callback_data="select_trial"
    ))
    keyboard.add(InlineKeyboardButton(
        text="üí´ –ë–∞–∑–æ–≤—ã–π - 1500‚ÇΩ",
        callback_data="select_basic"
    ))
    keyboard.add(InlineKeyboardButton(
        text="‚≠ê –°—Ç–∞–Ω–¥–∞—Ä—Ç - 3500‚ÇΩ",
        callback_data="select_standard"
    ))
    keyboard.add(InlineKeyboardButton(
        text="üëë –ü—Ä–µ–º–∏—É–º - 8990‚ÇΩ",
        callback_data="select_premium"
    ))
    keyboard.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="back_to_start"
    ))
    keyboard.adjust(1)
    
    await callback.message.edit_text(prices_text, reply_markup=keyboard.as_markup(), parse_mode="HTML")


async def callback_select_package(callback: CallbackQuery, state: FSMContext):
    """Handle package selection"""
    
    await callback.answer()
    
    package_type = callback.data.split("_")[1]  # select_trial -> trial
    
    # Import here to avoid circular imports
    from ..worker.prompts import PromptGenerator
    prompt_gen = PromptGenerator()
    package_info = prompt_gen.get_package_info(package_type)
    
    await state.update_data(
        package_type=package_type,
        package_info=package_info
    )
    
    confirmation_text = f"""
‚úÖ <b>–í—ã–±—Ä–∞–Ω –ø–∞–∫–µ—Ç "{package_info['name']}"</b>

üìã <b>–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:</b>
‚Ä¢ {package_info['photos']} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
‚Ä¢ {package_info['styles']} —Å—Ç–∏–ª–µ–π —Å—ä–µ–º–∫–∏
{"‚Ä¢ 1 –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ" if package_info['video'] else ""}
{"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ—Ç—É—à—å + 4K upscale" if package_info['post_process'] else ""}

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {package_info['price']} ‚ÇΩ

–ì–æ—Ç–æ–≤–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? –ó–∞–≥—Ä—É–∑–∏ 10-15 —Å–µ–ª—Ñ–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!
"""
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(
        text="üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ",
        callback_data="start_photo_upload"
    ))
    keyboard.add(InlineKeyboardButton(
        text="üé® –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∏–ª–∏",
        callback_data="show_new_styles"
    ))
    keyboard.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–∞–∫–µ—Ç",
        callback_data="show_prices"
    ))
    keyboard.adjust(1)
    
    await callback.message.edit_text(confirmation_text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
    await state.set_state(PhotoSessionStates.package_selection)


async def callback_show_new_styles(callback: CallbackQuery):
    """Show new styles with previews"""
    
    await callback.answer()
    
    styles_text = """
üé® <b>–ù–æ–≤—ã–µ —Å—Ç–∏–ª–∏ 2025</b>

‚≠ê <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ:</b>
‚Ä¢ <b>RL-01</b> - Realistic Studio Vogue
‚Ä¢ <b>FN-02</b> - Fantasy Ethereal  
‚Ä¢ <b>CEO-05</b> - Corporate Headshot
‚Ä¢ <b>PST-06</b> - Pastel Dream

üî• <b>–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ:</b>
‚Ä¢ <b>CP-03</b> - Cyberpunk Neon City
‚Ä¢ <b>MJ6-04</b> - Midjourney V6 Look
‚Ä¢ <b>CLS-07</b> - Classic B&W
‚Ä¢ <b>CSP-08</b> - Cosplay Hero

–ö–∞–∂–¥—ã–π —Å—Ç–∏–ª—å –≤–∫–ª—é—á–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –æ–±—Ä–∞–∑—ã, –æ—Å–≤–µ—â–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è!
"""
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(
        text="üì∏ –ù–∞—á–∞—Ç—å —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—é",
        callback_data="start_photo_upload"
    ))
    keyboard.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="show_prices"
    ))
    
    await callback.message.edit_text(styles_text, reply_markup=keyboard.as_markup(), parse_mode="HTML")


async def callback_start_photo_upload(callback: CallbackQuery, state: FSMContext):
    """Start photo upload process"""
    
    await callback.answer()
    
    # Create new session
    from .utils import create_session_id
    session_id = create_session_id(callback.from_user.id)
    await state.update_data(session_id=session_id)
    
    upload_text = """
üì∏ <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</b>

<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–µ–ª—Ñ–∏:</b>
‚Ä¢ 10-15 —Ñ–æ—Ç–æ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤
‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ (–ª—É—á—à–µ –¥–Ω–µ–≤–Ω–æ–π —Å–≤–µ—Ç)
‚Ä¢ –õ–∏—Ü–æ —á–µ—Ç–∫–æ –≤–∏–¥–Ω–æ
‚Ä¢ –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –º–∞—Å–æ–∫
‚Ä¢ –†–∞–∑–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ª–∏—Ü–∞
‚Ä¢ 2-3 —Ä–∞–∑–Ω—ã—Ö –æ–±—Ä–∞–∑–∞ –æ–¥–µ–∂–¥—ã

–ó–∞–≥—Ä—É–∂–∞–π —Ñ–æ—Ç–æ –ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ä–∞–∑—É ‚¨áÔ∏è
"""
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(
        text="üí° –°–æ–≤–µ—Ç—ã –ø–æ —Å–µ–ª—Ñ–∏",
        callback_data="photo_tips"
    ))
    keyboard.add(InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
        callback_data="cancel_session"
    ))
    
    await callback.message.edit_text(upload_text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
    await state.set_state(PhotoSessionStates.waiting_for_photos)


async def callback_back_to_start(callback: CallbackQuery, state: FSMContext):
    """Handle back to start callback"""
    
    await callback.answer()
    
    # Reset to start state
    await state.clear()
    
    # Show start message
    await cmd_start(callback.message, state, None)


async def handle_photo(message: Message, state: FSMContext):
    """Handle photo upload"""
    
    current_state = await state.get_state()
    
    if current_state != PhotoSessionStates.waiting_for_photos:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—é –∫–æ–º–∞–Ω–¥–æ–π /new"
        )
        return
    
    data = await state.get_data()
    photos = data.get("photos", [])
    
    # Validate photo
    if not validate_photo(message.photo[-1]):
        await message.answer(
            "‚ùå –§–æ—Ç–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ:\n"
            "‚Ä¢ –õ–∏—Ü–æ —á–µ—Ç–∫–æ –≤–∏–¥–Ω–æ\n"
            "‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
            "‚Ä¢ –†–∞–∑–º–µ—Ä –¥–æ 10 –ú–ë"
        )
        return
    
    # Save photo
    photo_path = await save_photo(message.photo[-1], data["session_id"])
    photos.append(photo_path)
    
    await state.update_data(photos=photos)
    
    # Check if we have enough photos
    if len(photos) >= 10:
        await message.answer(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(photos)} —Ñ–æ—Ç–æ.\n\n"
            "–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Å–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –¥–ª—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏:",
            reply_markup=get_brief_keyboard()
        )
        await state.set_state(PhotoSessionStates.collecting_brief)
    else:
        remaining = 10 - len(photos)
        await message.answer(
            f"üì∏ –§–æ—Ç–æ {len(photos)}/10 –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n"
            f"–ó–∞–≥—Ä—É–∑–∏ –µ—â–µ {remaining} —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        )


async def handle_text(message: Message, state: FSMContext, openai_assistant: OpenAIAssistant):
    """Handle text messages"""
    
    current_state = await state.get_state()
    
    if current_state == PhotoSessionStates.collecting_brief:
        # Forward to OpenAI Assistant
        try:
            response = await openai_assistant.handle_message(
                user_id=message.from_user.id,
                message=message.text,
                state=state
            )
            
            if response:
                await message.answer(response)
        
        except Exception as e:
            logger.error(f"Error handling message with assistant: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∫–æ–º–∞–Ω–¥–æ–π /new"
            )
    else:
        await message.answer(
            "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/new - –Ω–æ–≤–∞—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è\n"
            "/help - –ø–æ–º–æ—â—å"
        )


def get_photo_upload_keyboard() -> InlineKeyboardMarkup:
    """Get keyboard for photo upload"""
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(
        text="üì± –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ö–æ—Ä–æ—à–∏–µ —Å–µ–ª—Ñ–∏",
        callback_data="photo_tips"
    ))
    keyboard.add(InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
        callback_data="cancel_session"
    ))
    
    return keyboard.as_markup()


def get_brief_keyboard() -> InlineKeyboardMarkup:
    """Get keyboard for brief collection"""
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(
        text="üé® –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∏–ª–∏",
        callback_data="show_styles"
    ))
    keyboard.add(InlineKeyboardButton(
        text="üí∞ –í—ã–±—Ä–∞—Ç—å –ø–∞–∫–µ—Ç",
        callback_data="choose_package"
    ))
    
    return keyboard.as_markup()


def setup_handlers(dp: Dispatcher):
    """Setup all handlers"""
    
    # Commands
    dp.message.register(cmd_start, CommandStart())
    dp.message.register(cmd_help, Command("help"))
    dp.message.register(cmd_new, Command("new"))
    dp.message.register(cmd_status, Command("status"))
    dp.message.register(cmd_cancel, Command("cancel"))
    
    # Callbacks - Main menu
    dp.callback_query.register(callback_start_session, F.data == "start_session")
    dp.callback_query.register(callback_show_examples, F.data == "show_examples")
    dp.callback_query.register(callback_show_prices, F.data == "show_prices")
    dp.callback_query.register(callback_back_to_start, F.data == "back_to_start")
    
    # Callbacks - Package selection
    dp.callback_query.register(callback_select_package, F.data == "select_trial")
    dp.callback_query.register(callback_select_package, F.data == "select_basic")
    dp.callback_query.register(callback_select_package, F.data == "select_standard")
    dp.callback_query.register(callback_select_package, F.data == "select_premium")
    
    # Callbacks - Styles and upload
    dp.callback_query.register(callback_show_new_styles, F.data == "show_new_styles")
    dp.callback_query.register(callback_start_photo_upload, F.data == "start_photo_upload")
    
    # Content
    dp.message.register(handle_photo, F.content_type == ContentType.PHOTO)
    dp.message.register(handle_text, F.content_type == ContentType.TEXT)
    
    logger.info("Handlers setup completed") 