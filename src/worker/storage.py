"""
Yandex Object Storage integration
"""

import asyncio
import logging
import os
from typing import Optional, List, Dict, Any
import boto3
from botocore.config import Config
from botocore.exceptions import ClientError, NoCredentialsError
import aiofiles
import aiohttp
from urllib.parse import quote
from .config import settings

logger = logging.getLogger(__name__)


class YandexObjectStorage:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Yandex Object Storage"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ S3"""
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Yandex Cloud
        self.config = Config(
            region_name='ru-central1',
            retries={'max_attempts': 3, 'mode': 'adaptive'},
            signature_version='s3v4'
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç S3
        self.s3_client = boto3.client(
            's3',
            endpoint_url='https://storage.yandexcloud.net',
            aws_access_key_id=settings.YC_ACCESS_KEY,
            aws_secret_access_key=settings.YC_SECRET_KEY,
            config=self.config
        )
        
        self.bucket_name = settings.YC_BUCKET_NAME  # ai-photos
        
        logger.info(f"ü™£ Yandex Object Storage initialized for bucket: {self.bucket_name}")
    
    async def upload_image(self, image_data: bytes, key: str, 
                          content_type: str = 'image/jpeg') -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Object Storage
        
        Args:
            image_data: –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            key: –∫–ª—é—á –æ–±—ä–µ–∫—Ç–∞ (–ø—É—Ç—å –≤ –±–∞–∫–µ—Ç–µ)
            content_type: MIME —Ç–∏–ø —Ñ–∞–π–ª–∞
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
        """
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file_path = f"/tmp/{key}"
            os.makedirs(os.path.dirname(temp_file_path), exist_ok=True)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
            async with aiofiles.open(temp_file_path, 'wb') as f:
                await f.write(image_data)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3 —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (boto3 –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç async)
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(
                None, 
                self._upload_file_sync, 
                temp_file_path, 
                key, 
                content_type
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(temp_file_path)
            except:
                pass
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Upload error for {key}: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "key": key
            }
    
    def _upload_file_sync(self, file_path: str, key: str, content_type: str) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"""
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            self.s3_client.upload_file(
                file_path,
                self.bucket_name,
                key,
                ExtraArgs={
                    'ContentType': content_type,
                    'ACL': 'public-read'  # –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è —á—Ç–µ–Ω–∏—è
                }
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
            public_url = f"https://storage.yandexcloud.net/{self.bucket_name}/{quote(key)}"
            
            logger.info(f"‚úÖ File uploaded: {key}")
            
            return {
                "success": True,
                "key": key,
                "url": public_url,
                "bucket": self.bucket_name
            }
            
        except ClientError as e:
            error_code = e.response['Error']['Code']
            logger.error(f"‚ùå AWS Client error {error_code}: {e}")
            return {
                "success": False,
                "error": f"AWS error: {error_code}",
                "key": key
            }
        except NoCredentialsError:
            logger.error("‚ùå AWS credentials not found")
            return {
                "success": False,
                "error": "No AWS credentials",
                "key": key
            }
        except Exception as e:
            logger.error(f"‚ùå Unexpected upload error: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "key": key
            }
    
    async def upload_multiple_images(self, images: List[Dict[str, Any]], 
                                   session_id: str) -> List[Dict[str, Any]]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        Args:
            images: —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏
            session_id: ID —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
        """
        
        results = []
        
        for i, image_data in enumerate(images):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á —Ñ–∞–π–ª–∞
            timestamp = image_data.get('timestamp', 'unknown')
            key = f"sessions/{session_id}/image_{i+1}_{timestamp}.jpg"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            result = await self.upload_image(
                image_data['data'], 
                key,
                image_data.get('content_type', 'image/jpeg')
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            result.update({
                "index": i + 1,
                "session_id": session_id,
                "original_filename": image_data.get('filename', f'image_{i+1}.jpg')
            })
            
            results.append(result)
        
        successful_uploads = len([r for r in results if r["success"]])
        logger.info(f"üì§ Uploaded {successful_uploads}/{len(images)} images for session {session_id}")
        
        return results
    
    def upload_file(self, file_path: str, key: str, content_type: str = None) -> str:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞ –≤ Object Storage (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        
        Args:
            file_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ –¥–∏—Å–∫–µ
            key: –∫–ª—é—á –æ–±—ä–µ–∫—Ç–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            content_type: MIME —Ç–∏–ø —Ñ–∞–π–ª–∞ (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é)
            
        Returns:
            URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        """
        
        try:
            # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ content_type
            if content_type is None:
                if key.lower().endswith('.jpg') or key.lower().endswith('.jpeg'):
                    content_type = 'image/jpeg'
                elif key.lower().endswith('.png'):
                    content_type = 'image/png'
                elif key.lower().endswith('.zip'):
                    content_type = 'application/zip'
                else:
                    content_type = 'application/octet-stream'
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            result = self._upload_file_sync(file_path, key, content_type)
            
            if result['success']:
                logger.info(f"‚úÖ File uploaded successfully: {key}")
                return result['url']
            else:
                logger.error(f"‚ùå File upload failed: {result['error']}")
                raise Exception(f"Upload failed: {result['error']}")
                
        except Exception as e:
            logger.error(f"‚ùå Upload file error for {key}: {str(e)}")
            raise e
    
    async def delete_session_files(self, session_id: str) -> Dict[str, Any]:
        """
        –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–∏
        
        Args:
            session_id: ID —Å–µ—Å—Å–∏–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
            prefix = f"sessions/{session_id}/"
            
            loop = asyncio.get_event_loop()
            objects = await loop.run_in_executor(
                None,
                self._list_objects_sync,
                prefix
            )
            
            if not objects:
                return {"success": True, "deleted_count": 0, "message": "No files to delete"}
            
            # –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã
            deleted_count = await loop.run_in_executor(
                None,
                self._delete_objects_sync,
                objects
            )
            
            logger.info(f"üóëÔ∏è Deleted {deleted_count} files for session {session_id}")
            
            return {
                "success": True,
                "deleted_count": deleted_count,
                "session_id": session_id
            }
            
        except Exception as e:
            logger.error(f"‚ùå Delete session files error: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "session_id": session_id
            }
    
    def _list_objects_sync(self, prefix: str) -> List[str]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤"""
        
        try:
            response = self.s3_client.list_objects_v2(
                Bucket=self.bucket_name,
                Prefix=prefix
            )
            
            objects = []
            if 'Contents' in response:
                objects = [obj['Key'] for obj in response['Contents']]
            
            return objects
            
        except Exception as e:
            logger.error(f"‚ùå List objects error: {str(e)}")
            return []
    
    def _delete_objects_sync(self, object_keys: List[str]) -> int:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤"""
        
        try:
            if not object_keys:
                return 0
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è batch delete
            delete_objects = {
                'Objects': [{'Key': key} for key in object_keys]
            }
            
            response = self.s3_client.delete_objects(
                Bucket=self.bucket_name,
                Delete=delete_objects
            )
            
            deleted_count = len(response.get('Deleted', []))
            
            if 'Errors' in response:
                for error in response['Errors']:
                    logger.error(f"‚ùå Delete error for {error['Key']}: {error['Message']}")
            
            return deleted_count
            
        except Exception as e:
            logger.error(f"‚ùå Batch delete error: {str(e)}")
            return 0
    
    async def generate_presigned_url(self, key: str, expiration: int = 3600) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        
        Args:
            key: –∫–ª—é—á –æ–±—ä–µ–∫—Ç–∞
            expiration: –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å—Å—ã–ª–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            –ü–æ–¥–ø–∏—Å–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏–ª–∏ None
        """
        
        try:
            loop = asyncio.get_event_loop()
            url = await loop.run_in_executor(
                None,
                self._generate_presigned_url_sync,
                key,
                expiration
            )
            
            return url
            
        except Exception as e:
            logger.error(f"‚ùå Generate presigned URL error: {str(e)}")
            return None
    
    def _generate_presigned_url_sync(self, key: str, expiration: int) -> str:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
        
        return self.s3_client.generate_presigned_url(
            'get_object',
            Params={'Bucket': self.bucket_name, 'Key': key},
            ExpiresIn=expiration
        )
    
    async def check_bucket_access(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–∞–∫–µ—Ç—É
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        
        try:
            loop = asyncio.get_event_loop()
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∫–µ—Ç–µ
            await loop.run_in_executor(
                None,
                self.s3_client.head_bucket,
                Bucket=self.bucket_name
            )
            
            logger.info(f"‚úÖ Bucket access verified: {self.bucket_name}")
            
            return {
                "success": True,
                "bucket": self.bucket_name,
                "message": "Bucket access verified"
            }
            
        except ClientError as e:
            error_code = e.response['Error']['Code']
            
            if error_code == '404':
                message = f"Bucket {self.bucket_name} not found"
            elif error_code == '403':
                message = f"Access denied to bucket {self.bucket_name}"
            else:
                message = f"AWS error {error_code}: {e}"
            
            logger.error(f"‚ùå Bucket access check failed: {message}")
            
            return {
                "success": False,
                "error": message,
                "bucket": self.bucket_name
            }
        except Exception as e:
            logger.error(f"‚ùå Bucket access check error: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "bucket": self.bucket_name
            }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
storage = YandexObjectStorage() 