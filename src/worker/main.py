#!/usr/bin/env python3
"""
Worker main module for Yandex Message Queue processing
–ó–∞–º–µ–Ω—è–µ—Ç Celery worker –¥–ª—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã v2
"""

import asyncio
import json
import logging
import signal
import sys
import time
from typing import Dict, Any

from .config import settings
from .mq_client import get_mq_client
from .tasks import process_image_generation_task
from .health import check_health

# Configure logging
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class MessageQueueWorker:
    """Worker –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Yandex Message Queue"""
    
    def __init__(self):
        self.running = True
        self.mq_client = get_mq_client()
        self.processed_count = 0
        self.error_count = 0
        
        # Graceful shutdown
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
        logger.info("üöÄ YC Message Queue Worker initialized")
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        logger.info(f"üì® Received signal {signum}, shutting down gracefully...")
        self.running = False
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ worker'–∞"""
        logger.info("üîÑ Starting YC Message Queue Worker...")
        
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                messages = self.mq_client.receive_messages(
                    max_messages=settings.WORKER_CONCURRENCY,
                    wait_time=20  # Long polling
                )
                
                if not messages:
                    logger.debug("üì≠ No messages in queue, waiting...")
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                for message in messages:
                    try:
                        self._process_message(message)
                        self.processed_count += 1
                        
                    except Exception as e:
                        logger.error(f"‚ùå Error processing message: {e}")
                        self.error_count += 1
                        # –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, –æ–Ω–æ –≤–µ—Ä–Ω—ë—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥—å
                        continue
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if self.processed_count % 10 == 0:
                    logger.info(f"üìä Processed: {self.processed_count}, Errors: {self.error_count}")
                
            except Exception as e:
                logger.error(f"‚ùå Worker error: {e}")
                time.sleep(5)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        logger.info("üõë Worker stopped")
    
    def _process_message(self, message: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü–∞—Ä—Å–∏–º —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            body = json.loads(message['Body'])
            task_type = body.get('task_type')
            task_data = body.get('data', {})
            
            logger.info(f"üîÑ Processing task: {task_type}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ —Ç–∏–ø—É
            if task_type == 'generate_images':
                result = process_image_generation_task(task_data)
                
                if result.get('success'):
                    logger.info(f"‚úÖ Task completed successfully: {task_type}")
                else:
                    logger.error(f"‚ùå Task failed: {result.get('error')}")
                    raise Exception(f"Task processing failed: {result.get('error')}")
            
            else:
                logger.warning(f"‚ö†Ô∏è Unknown task type: {task_type}")
                raise Exception(f"Unknown task type: {task_type}")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
            receipt_handle = message['ReceiptHandle']
            if self.mq_client.delete_message(receipt_handle):
                logger.info("üóëÔ∏è Message deleted from queue")
            else:
                logger.warning("‚ö†Ô∏è Failed to delete message from queue")
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå Invalid JSON in message: {e}")
            raise
        except Exception as e:
            logger.error(f"‚ùå Message processing error: {e}")
            raise


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è worker'–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        logger.info("üîß Checking worker configuration...")
        
        if not settings.YC_MQ_URL:
            raise ValueError("YC_MQ_URL is required")
        
        if not settings.PIAPI_KEY:
            raise ValueError("PIAPI_KEY is required")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        logger.info("üè• Checking worker health...")
        health_result = check_health()
        
        if not health_result.get('healthy', False):
            logger.error(f"‚ùå Health check failed: {health_result}")
            sys.exit(1)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º worker
        worker = MessageQueueWorker()
        worker.start()
        
    except KeyboardInterrupt:
        logger.info("üõë Worker interrupted by user")
        sys.exit(0)
    except Exception as e:
        logger.error(f"‚ùå Worker startup error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main() 