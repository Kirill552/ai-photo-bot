"""
Yandex Message Queue client
–ó–∞–º–µ–Ω—è–µ—Ç Celery –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—á–µ—Ä–µ–¥—è–º–∏ –≤ Serverless –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
"""

import asyncio
import json
import logging
from typing import Dict, Any, Optional, List
import boto3
from botocore.exceptions import ClientError
from .config import settings

logger = logging.getLogger(__name__)


class YandexMessageQueue:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Yandex Message Queue"""
    
    def __init__(self, queue_url: str, access_key: str, secret_key: str, region: str = "ru-central1"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            queue_url: URL –æ—á–µ—Ä–µ–¥–∏ –≤ Yandex Cloud
            access_key: –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –∫ Yandex Cloud
            secret_key: –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á Yandex Cloud
            region: –†–µ–≥–∏–æ–Ω Yandex Cloud
        """
        self.queue_url = queue_url
        self.region = region
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç SQS (YC MQ —Å–æ–≤–º–µ—Å—Ç–∏–º —Å Amazon SQS)
        self.sqs = boto3.client(
            'sqs',
            region_name=region,
            aws_access_key_id=access_key,
            aws_secret_access_key=secret_key,
            endpoint_url='https://message-queue.api.cloud.yandex.net'
        )
        
        logger.info(f"Initialized YC Message Queue client for region {region}")
    
    def send_message(self, message_body: Dict[str, Any], delay_seconds: int = 0) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
        
        Args:
            message_body: –¢–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–±—É–¥–µ—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ JSON)
            delay_seconds: –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            response = self.sqs.send_message(
                QueueUrl=self.queue_url,
                MessageBody=json.dumps(message_body, ensure_ascii=False),
                DelaySeconds=delay_seconds
            )
            
            message_id = response.get('MessageId')
            logger.info(f"‚úÖ Message sent to queue: {message_id}")
            return True
            
        except ClientError as e:
            logger.error(f"‚ùå Error sending message to queue: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå Unexpected error sending message: {e}")
            return False
    
    def receive_messages(self, max_messages: int = 10, wait_time: int = 20) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        
        Args:
            max_messages: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
            wait_time: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (long polling)
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        try:
            response = self.sqs.receive_message(
                QueueUrl=self.queue_url,
                MaxNumberOfMessages=max_messages,
                WaitTimeSeconds=wait_time,
                AttributeNames=['All']
            )
            
            messages = response.get('Messages', [])
            logger.info(f"üì® Received {len(messages)} messages from queue")
            
            return messages
            
        except ClientError as e:
            logger.error(f"‚ùå Error receiving messages: {e}")
            return []
        except Exception as e:
            logger.error(f"‚ùå Unexpected error receiving messages: {e}")
            return []
    
    def delete_message(self, receipt_handle: str) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        Args:
            receipt_handle: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            self.sqs.delete_message(
                QueueUrl=self.queue_url,
                ReceiptHandle=receipt_handle
            )
            
            logger.info("‚úÖ Message deleted from queue")
            return True
            
        except ClientError as e:
            logger.error(f"‚ùå Error deleting message: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå Unexpected error deleting message: {e}")
            return False
    
    def get_queue_attributes(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            response = self.sqs.get_queue_attributes(
                QueueUrl=self.queue_url,
                AttributeNames=['All']
            )
            
            return response.get('Attributes', {})
            
        except ClientError as e:
            logger.error(f"‚ùå Error getting queue attributes: {e}")
            return {}


class AsyncYandexMessageQueue:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Yandex Message Queue"""
    
    def __init__(self, queue_url: str, access_key: str, secret_key: str, region: str = "ru-central1"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        """
        self.queue_url = queue_url
        self.region = region
        self.access_key = access_key
        self.secret_key = secret_key
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ async –º–µ—Ç–æ–¥–∞—Ö
        self._sync_client = None
        
        logger.info(f"Initialized async YC Message Queue client for region {region}")
    
    def _get_client(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (lazy initialization)"""
        if self._sync_client is None:
            self._sync_client = boto3.client(
                'sqs',
                region_name=self.region,
                aws_access_key_id=self.access_key,
                aws_secret_access_key=self.secret_key,
                endpoint_url='https://message-queue.api.cloud.yandex.net'
            )
        return self._sync_client
    
    async def send_message(self, message_body: Dict[str, Any], delay_seconds: int = 0) -> bool:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        def _send():
            client = self._get_client()
            return client.send_message(
                QueueUrl=self.queue_url,
                MessageBody=json.dumps(message_body, ensure_ascii=False),
                DelaySeconds=delay_seconds
            )
        
        try:
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(None, _send)
            
            message_id = response.get('MessageId')
            logger.info(f"‚úÖ Async message sent to queue: {message_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Async error sending message: {e}")
            return False
    
    async def receive_messages(self, max_messages: int = 10, wait_time: int = 20) -> List[Dict[str, Any]]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        def _receive():
            client = self._get_client()
            return client.receive_message(
                QueueUrl=self.queue_url,
                MaxNumberOfMessages=max_messages,
                WaitTimeSeconds=wait_time,
                AttributeNames=['All']
            )
        
        try:
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(None, _receive)
            
            messages = response.get('Messages', [])
            logger.info(f"üì® Async received {len(messages)} messages")
            
            return messages
            
        except Exception as e:
            logger.error(f"‚ùå Async error receiving messages: {e}")
            return []
    
    async def delete_message(self, receipt_handle: str) -> bool:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        def _delete():
            client = self._get_client()
            return client.delete_message(
                QueueUrl=self.queue_url,
                ReceiptHandle=receipt_handle
            )
        
        try:
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(None, _delete)
            
            logger.info("‚úÖ Async message deleted from queue")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Async error deleting message: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
mq_client = None
async_mq_client = None


def get_mq_client() -> YandexMessageQueue:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ MQ"""
    global mq_client
    
    if mq_client is None:
        mq_client = YandexMessageQueue(
            queue_url=settings.YC_MQ_URL,
            access_key=settings.YC_ACCESS_KEY,
            secret_key=settings.YC_SECRET_KEY,
            region=settings.YC_REGION
        )
    
    return mq_client


def get_async_mq_client() -> AsyncYandexMessageQueue:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ MQ"""
    global async_mq_client
    
    if async_mq_client is None:
        async_mq_client = AsyncYandexMessageQueue(
            queue_url=settings.YC_MQ_URL,
            access_key=settings.YC_ACCESS_KEY,
            secret_key=settings.YC_SECRET_KEY,
            region=settings.YC_REGION
        )
    
    return async_mq_client 